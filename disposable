#!/usr/bin/env perl

use strict;
use warnings;

use Digest::SHA qw{sha256_hex};
use File::Basename;

if (-f '/.dockerenv') {
  die "Error: you are already inside the container\n";
}

unless (`docker --version 2>/dev/null` =~ /^Docker version/) {
  die "Error: could not run `docker --version`. Is Docker installed and in \$PATH?\n";
}

(my $CURRENT_DIR = basename($ENV{PWD})) =~ s/[^\w]/x/g;
my $IMAGE_NAME   = "disposable-$CURRENT_DIR-@{[substr sha256_hex($ENV{PWD}), 0, 12]}";
my $CONTAINER_ID = get_container_id();

if (($ARGV[0] || '') eq '--delete') {
  if ($CONTAINER_ID) {
    system "docker container stop $CONTAINER_ID";

    if (get_container_id()) {
      die "Error: could not stop the container '$CONTAINER_ID'\n";
    }
  }

  if (image_exists()) {
    system "docker image rm $IMAGE_NAME";

    if (image_exists()) {
      die "Error: could not detele the image '$IMAGE_NAME'\n";
    }
  }

  exit;
}

if (@ARGV > 0) {
  # let's keep things simple by only having the single `--delete` command
  print "TODO\n";
  exit;
}

if ($CONTAINER_ID) {
  system "docker attach $CONTAINER_ID";
  exit;
}

unless (image_exists()) {
  my $dockerfile
    = -f 'Dockerfile'        ? 'Dockerfile'
    : -f "$ENV{HOME}/.disposable/Dockerfile" ? "$ENV{HOME}/.disposable/Dockerfile"
    : die "Error: './Dockerfile' or '$ENV{HOME}/.disposable/Dockerfile' needs to exist\n";

  system "docker build --build-arg UID=$< --build-arg USER=$ENV{USER} -f $dockerfile -t $IMAGE_NAME .";

  unless (image_exists()) {
    die "Error: failed to build the image '$IMAGE_NAME'\n";
  }
}

system join ' ', (
  "docker run --rm -it",
  "-u $ENV{USER}",
  "--cap-add SYS_PTRACE",
  "-w /mnt/$CURRENT_DIR",
  "--mount type=bind,source=$ENV{PWD},target=/mnt/$CURRENT_DIR",
  (-d "$ENV{HOME}/.disposable"
    ? "--mount ro=true,type=bind,source=$ENV{HOME}/.disposable/,target=/mnt/.disposable"
    : ""),
  $IMAGE_NAME,
  (-x "$ENV{HOME}/.disposable/bootstrap" ? "/mnt/.disposable/bootstrap" : '$SHELL'),
);

sub get_container_id {
  ( `docker container ls -a | grep "\\s$IMAGE_NAME\\s"` || '') =~ /^(\w{12})/;
  return $1 || '';
}

sub image_exists {
  return (`docker image inspect $IMAGE_NAME 2>&1` || '') =~ /"Created"/;
}
